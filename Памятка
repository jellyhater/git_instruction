# **Памятка**
 ## Горячие клавиши 

-  <kbd>CTRL</kbd> + <kbd> S</kbd> -  локальное сохранение файла.

- <kbd>CTRL</kbd> + <kbd> =</kbd> -  увеличить масштаб VS Code.
- <kbd>CTRL</kbd> + <kbd> -</kbd> -  уменьшить масштаб VS Code.
- <kbd>F1</kbd> - поиск настроек.
- <kbd>CTRL</kbd> + <kbd>SHIFT</kbd> + <kbd>`</kbd> - создать новое окно терминала.
- <kbd>CTRL</kbd>  + <kbd>`</kbd> - отобразить окно терминала. 
- <kbd>&#8593;</kbd> , <kbd>&#8595;</kbd> - для переключения по истории команд в терминале.
- <kbd>TAB</kbd> - для автозаполнения имени файла.
- <kbd>Q</kbd> - выход из просмотра истории коммитов в терминале.

 ## Команды 

1. **`git init`** - инициализация репозитория.

2. **`git add <path>|-a|.`** - добавить новую версию файла, имеющего относительный путь **`path`**, все директории данного репозитория или текущую директорию и ее поддиректории.

3. **`git commit -m "message"`** - зафиксировать изменения и написать комментарий к версии.

4. **`git log [--graph]`** - отображает историю всех коммитов с комментариями в виде графа или нет.

5. **`git checkout <hashID> | <master>`** - перейти к другой сохраненной версии или вернуться к последней версии. 

6. **`git diff`** - показывает разницу между изменениями в рабочей папке и в области индексирования.

7. **`get status`** - показывает состояние рабочей папки.

8. **`git version`** - версия git. Служит для проверки установки программы.
9. **`git branch`** - просмотреть список имеющихся веток.
10. **`git branch new_branch`** - создать новую ветку с именем *new_branch*.
11. **`git branch -d branch_name`** - безопасное удаление слитой ветки.
12. **`git merge branch_name`** - слить изменения из ветки с именем branch_name в текущую ветку. 

Посмотреть дополнительную информацию по языку Markdown можно [здесь](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).
Справочная информация по Git находится [здесь](https://docs.github.com/en/get-started/using-git/about-git).

# Синтаксис Markdown

## Выделение текста
---
Чтобы задать для текста **полужирное начертание**, заключите его в двойные звездочки (**) или двойные символы нижнего подчеркивания ( __ ):

>### **полужирный текст**, __тоже полужирный текст__
---
Чтобы задать для текста *курсивное* начертание, заключите его в одинарные звездочки (*) или в одинарные символы нижнего подчеркивания ( _ ):
>### *курсивный текст*, _тоже курсивный текст_
---
Текст может быть полужирным и курсивным одновременно. Для этого его необходимо заключить в тройные звездочки (***) или символы нижнего подчеркивания ( ___ ):
>### ***полужирный и курсивный текст***, ___тоже полужирный и курсивный текст___
Можно комбинировать форматы начертания текста, используя разные варианты обрамления звездочками (*) и нижним подчеркиванием ( _ ):
>### *__полужирный текст__ посреди курсивного* и __*курсивный текст* среди полужирного__
---
Текст может быть ~~зачеркнутым~~:
>### ~~зачеркнутый текст~~

---

## Списки

Списки бывают нумерованными и ненумерованными. 
Нумерованные списки оформляются с помощью нумерации элементов списка:
1. первый элемент;
2. второй элемент;

    ...

10000. конец списка (со счета не собьетесь:astonished:!).

Ненумерованные списки оформляются через звездочку (*) или плюс (+):
* первый элемент (*);
* второй элемент (*);
+ третий элемент (+);
+ четвертый элемент (+);

## Работа с изображениями

Чтобы прикрепить картинку, поставьте восклицательный знак, напишите поясняющий текст в квадратных скобках и затем в круглых скобках название картинки, заранее помещенной в локальный репозиторий, или ссылку на нее в интернете.

# Работа с GitHub
Чтобы наш репозиторий на GitHub сделать локальным, необходимо его склонировать с помощью команды:
>`git clone [link]`
---
Если, поработав с локальным репозиторием, мы хотим, чтобы внесенные изменения отразились в удаленном репозитории, необходимо написать команду:
>`git push --set-upstream origin main`

Данная команда требует предварительной авторизации в аккаунте GitHub.

---
Чтобы применить внесенные изменения с другого компьютера, имеющиеся на GitHub, в локальный репозиторий, необходимо их стянуть:
>`git  pull`

Данная команда сливает ветки с удаленного репозитория с версией локального репозитория.

---
Для того, чтобы сделать **pull request**, необходимо сделать форк понравившегося чужого репозитория, затем склонировать его на наш локальный репозиторий, внести изменения, отправить версию в свой удаленный репозиторий, затем сравнить и сделать pull request.

---

Не теряйте контроль!

![mem](https://cs.pikabu.ru/post_img/2013/05/02/10/1367508167_48557315.jpg)
